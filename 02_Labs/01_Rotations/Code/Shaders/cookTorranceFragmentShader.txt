#version 330 core

#define PI 3.14159265

out vec4 FragColor;

in vec3 normal;
in vec3 lightDir;
in vec3 viewDir;
in float attenuation;

vec3 ambientColor = vec3(0.0);
vec3 diffuse = vec3(0.0);
vec3 cookTorrance = vec3(0.0);
uniform float roughness;
uniform vec3 lightColor;
uniform float standard = 0.1;
void main()
{
	vec3 halfAngle = normalize(viewDir + lightDir);
	float normalDotHalfAngle = max(dot(normal, halfAngle), 0.0);
	float normalDotHalfAngleSquared = normalDotHalfAngle * normalDotHalfAngle;
	float normalDotViewDir = max(dot(normal, viewDir), 0.0);
	float viewDirDotHalfAngle = max(dot(viewDir, halfAngle), 0.0);
	float normalDotLightDir = max(dot(normal, lightDir), 0.0);
	float Kr = pow((1.0 - standard) / (1.0 + standard), 2.0);

	// Distribution
	float roughnessSquared = roughness * roughness;
	float denominator = 1.0 / roughnessSquared * (pow(normalDotHalfAngleSquared, 2.0));
	float tan2Alpha = (normalDotHalfAngleSquared - 1.0) / normalDotHalfAngleSquared;
	float D = exp(tan2Alpha / roughnessSquared) / denominator;

	// Geometric Functions
	float g1 = (normalDotHalfAngleSquared * normalDotViewDir) / viewDirDotHalfAngle;
	float g2 = (normalDotHalfAngleSquared * normalDotLightDir) / viewDirDotHalfAngle;
	float G = min(1.0, min(g1, g2));

	// Fresnel
	float F = Kr + (1.0 - Kr) * pow((1.0 - normalDotLightDir), 5.0);

	// Cook-Torrance
	vec3 specular = (((D * F * G) / (PI * normalDotViewDir)) * lightColor);
	vec3 lambertian = (1.0 - roughness) * (lightColor * normalDotLightDir);
	diffuse += lambertian * attenuation;
	cookTorrance += (specular * attenuation);
	ambientColor += (lightColor * attenuation);
	vec3 ambience = 0.01 * ambientColor;

	vec3 result = (ambience + diffuse + cookTorrance);
	FragColor = vec4(result, 1.0f);
}