#version 330

in vec3 vertex_position;
in vec3 vertex_normal;
in vec2 vertex_texture;
in vec3 aTangent;
in vec3 aBitangent;

out vec3 fragPosTS;
out vec3 lightPosTS;
out vec3 viewPosTS;
out vec2 texCoords; 
out vec3 normalIn;

uniform mat4 view;
uniform mat4 proj;
uniform mat4 model;

uniform vec3 lightPos;
uniform vec3 viewPos;
uniform int uvScalar;

void main(){
  vec3 fragPos = vec3(model * vec4(vertex_position, 1.0));
  normalIn = mat3(transpose(inverse(model))) * vertex_normal;
  texCoords = vertex_texture * uvScalar;

  mat3 modelVector = transpose(inverse(mat3(model)));
  vec3 T = normalize(modelVector * aTangent);
  vec3 B = normalize(modelVector * aBitangent);
  vec3 N = normalize(modelVector * vertex_normal);
  mat3 TBN = transpose(mat3(T, B, N));

  fragPosTS = TBN * fragPos;
  lightPosTS = TBN * lightPos;
  viewPosTS = TBN * viewPos;

  gl_Position = proj * view * model * vec4(vertex_position, 1.0);
}


  